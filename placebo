#!/usr/bin/env bash

_usage() {
  case "$1" in
  "main")
    echo "Usage: . $0 [-h]"
    ;;
  "attach")
    echo "Usage: pill_attach [-h] \
command=command1[,command2,...] data_path=path/to/responses"
    ;;
  "playback")
    echo "Usage: pill_playback [-h]"
    echo "Sets Placebo to playback mode"
    ;;
  "record")
    echo "Usage: pill_record [-h]"
    echo "Sets Placebo to record mode"
    ;;
  "detach")
    echo "Usage: pill_detach [-h]"
    echo "Detaches Placebo and cleans \
up functions and variables"
    ;;
  esac
  return 0
}

if [ "$0" == "${BASH_SOURCE[0]}" ] ; then
  _usage main ; false
fi

if [ "$1" == "-h" ] ; then
  _usage main ; true
fi

pill_attach() {
  local err _command _data_path

  [ "$1" == "-h" ] && \
    _usage attach && return

  _command="$1"
  _data_path="$2"

  { [[ ! "$_command" =~ command= ]] || \
    [[ ! "$_data_path" =~ data_path= ]] ; } \
    && _usage attach && return 1

  _command="${_command#command=}"
  IFS=',' read -r -a COMMANDS <<< "$_command"

  DATA_PATH="${_data_path#data_path=}"

  if [ ! -d "$DATA_PATH" ] ; then
    echo "DATA_PATH should be a directory"
    _usage attach && return 1
  fi

  err=0
  for c in "${COMMANDS[@]}" ; do
    if ! which "$c" > /dev/null 2>&1 ; then
      echo "command '$c' not found" ; (( err++ ))
    fi
  done
  [ "$err" -gt 0 ] && \
    _usage attach && return 1

  _mock

  true > commands_log
}

pill_playback() {
  [ "$1" == "-h" ] && \
    _usage playback && return
  PILL=playback
}

pill_record() {
  [ "$1" == "-h" ] && \
    _usage record && return
  # shellcheck disable=SC2034
  PILL=record
}

pill_log() {
  [ "$1" == "-h" ] && \
    _usage log && return
  [ -f commands_log ] && \
    cat commands_log
}

pill_detach() {
  [ "$1" == "-h" ] && \
    _usage detach && return

  local f funcs
  funcs="_usage
pill_attach
pill_playback
pill_record
pill_log
pill_detach
_mock
_cli_to_comm
_comm_to_file
_create_new
_update_existing
_filter
_record"
  for f in $funcs "${COMMANDS[@]}"; do
    unset -f "$f"
  done
  unset PILL
  unset DATA_PATH
  rm -f commands_log
}

# private functions.

_mock() {
  for c in "${COMMANDS[@]}" ; do
    # shellcheck disable=SC2016,SC1004
    code="$c"'() {
      local file comm

      comm="${FUNCNAME[0]}"
      file=$(_comm_to_file "$comm")

      if [ -z "$DATA_PATH" ] ; then
        echo "\
DATA_PATH must be set. \
Try pill_attach"
        return 1
      fi

      if [ -z "$PILL" ] ; then
        echo "\
PILL must be set to \
playback or record. Try pill_playback \
or pill_record"
        return 1
      fi

      if { [ ! -f "$file" ] && [ "$PILL" == "playback" ] ; }; then
        echo "\
$file not found. \
Make sure you firstly record it"
        return 1
      fi

      echo "$comm $*" | \
        _filter >> commands_log

      case "$PILL" in
      "playback")
        source "$file" "$@"
        ;;
      "record")
        _record "$file" "$comm $*"
        ;;
      esac
    }'
    eval "$code"
  done
}

_cli_to_comm() {
  awk '{print $1}' <<< "$1"
}

_comm_to_file() {
  echo "$DATA_PATH"/"$1".sh
}

_filter() {
  sed -E "
    s/ +$//
    s/ +'/'/
    "
}

_record() {
  local file cli comm
  file="$1" ; cli="$2"
  comm=$(_cli_to_comm "$cli")

  if [ -s "$file" ] ; then
    _update_existing "$comm"
  else
    _create_new "$comm"
  fi

  # capture the response data.
  # shellcheck disable=SC2086
  response=$(command $cli)

  lines=$(wc -l <<< "$response")
  if [ "$lines" -eq 1 ] ; then

    # Print case on one line if it's short.
    echo \
      "'$cli') echo '$response' ;;" >> "$file"
  else

    # ... or format as multiline (cat <<EOF ...) otherwise.
    cat <<EOD | _filter >> "$file"
'$cli')
  cat <<'EOF'
$response
EOF
  ;;
EOD
  fi

  # And close the case statement.
  cat >> "$file" <<EOD
*)
  echo "No responses for: $comm \$*" | tee -a unknown_commands
  ;;
esac
EOD
}

_create_new() {
  local comm f
  comm="$1" ; f=$(_comm_to_file "$comm")
  # shellcheck disable=SC2086
  echo 'case "'$comm' $*" in' > "$f"
}

_update_existing() {
  local comm f
  comm="$1" ; f=$(_comm_to_file "$comm")
  awk '
    $0 == "*)" {
      exit
    }
    {
      print
    }
    ' "$f" > "$f.bak"
  mv "$f.bak" "$f"
}

# vim: ft=sh
